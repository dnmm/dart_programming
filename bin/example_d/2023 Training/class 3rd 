
class Shape{

String typeOfShape="";
int area=0;

void areaCircle(int radius)
{
area = radius*3;
}

void areaRectangle(int length, int breadth)
{
area = length*breadth;
}

void setTypeOfShape(String shapeType)
{
typeOfShape = shapeType;
}

void printDetailsOfShape()
{
print("type of shape is $typeOfShape"+" and it's area is $area");
}
}

void main()
{
Shape s=new Shape();
s.setTypeOfShape("circle");
s.areaCircle(5);
s.printDetailsOfShape();

s.setTypeOfShape("rectangle");
s.areaRectangle(5,5);
s.printDetailsOfShape();

}


2.    Abstract _class———-

Abstract class :This class can contain one or more than abstract method (those method without body/implementation)


abstract class can or cannot contain abstract method but if abstract method is present in any class that definitely that class is abstract

Very imp: you cannot make object of abstract class

any class extending abstract class should give the body of abstract method define in parent class
Why abstract class

abstract Parentcompany()
{
method 1 { with body }

abstract method 2 automatic gear() -without body
}

childcompany extend parentcompany()
{ method1 { with body}
method 2 automatic gear () { with body}
}

Example

abstract class Shape{

void area();
void typeOfShape();

}

class Circle extends Shape{

@override
void area(){

print("area of circle is 10");
}

@override
void typeOfShape(){

print("the type of shape is circle");
}

}

void main()
{
Circle c = new Circle();
c.area();
c.typeOfShape();


}

2 nd example

abstract class Shape{

void area();
void typeOfShape();

void printShape()
{
print("this is shape method");
}

}

class Circle extends Shape{

@override
void printShape(){

print("this is circle shape");
}

@override
void area(){

print("area of circle is 10");
}

@override
void typeOfShape(){

print("the type of shape is circle");
}

}

void main()
{
Circle c = new Circle();
c.area();
c.typeOfShape();
c.printShape();


}


